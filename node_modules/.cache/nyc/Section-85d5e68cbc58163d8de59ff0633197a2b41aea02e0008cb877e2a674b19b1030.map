{"version":3,"file":"/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/Section.ts","sources":["/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/Section.ts"],"names":[],"mappings":";;;AAAA,qDAO0B;AAE1B,MAAqB,OAAO;IACpB,IAAI,CAAS;IACb,EAAE,CAAS;IACX,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,IAAI,CAAS;IACb,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IAErB,YACC,EAAU,EACV,MAAc,EACd,OAAe,EACf,SAAiB,EACjB,UAAkB,EAClB,IAAY,EACZ,GAAW,EACX,IAAY,EACZ,IAAY,EACZ,KAAa;QAEb,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;CAED;AApCD,0BAoCC;AAID,KAAK,UAAU,gBAAgB,CAAC,QAAa;IAC5C,MAAM,QAAQ,GAAc,EAAE,CAAC;IAC/B,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,MAAM,EAAE;QAEnC,IACC,IAAI,CAAC,EAAE,KAAK,SAAS;YACrB,IAAI,CAAC,MAAM,KAAK,SAAS;YACzB,IAAI,CAAC,KAAK,KAAK,SAAS;YACxB,IAAI,CAAC,OAAO,KAAK,SAAS;YAC1B,IAAI,CAAC,SAAS,KAAK,SAAS;YAC5B,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,IAAI,CAAC,GAAG,KAAK,SAAS;YACtB,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,IAAI,CAAC,KAAK,KAAK,SAAS,EACvB;YACD,SAAS;SACT;aAAM;YAEN,IAAI,OAAO,GAAG,IAAI,OAAO,CACxB,IAAI,CAAC,EAAE,EACP,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,KAAK,CACV,CAAC;YAEF,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvB;KACD;IAED,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QAC1B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,6BAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC;KAC7D;IACD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClC,CAAC;AAEO,4CAAgB","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tNotFoundError,\n\tInsightResult,\n} from \"./IInsightFacade\";\n\nexport default class Section {\n\tpublic uuid: string;\n\tpublic id: string;\n\tpublic title: string;\n\tpublic instructor: string;\n\tpublic dept: string;\n\tpublic year: number;\n\tpublic avg: number;\n\tpublic pass: number;\n\tpublic fail: number;\n\tpublic audit: number;\n\n\tconstructor(\n\t\tid: string,\n\t\tCourse: string,\n\t\tSubject: string,\n\t\tProfessor: string,\n\t\tDepartment: string,\n\t\tYear: number,\n\t\tAvg: number,\n\t\tPass: number,\n\t\tFail: number,\n\t\tAudit: number\n\t) {\n\t\tthis.uuid = id;\n\t\tthis.id = Course;\n\t\tthis.title = Subject;\n\t\tthis.instructor = Professor;\n\t\tthis.dept = Department;\n\t\tthis.year = Year;\n\t\tthis.avg = Avg;\n\t\tthis.pass = Pass;\n\t\tthis.fail = Fail;\n\t\tthis.audit = Audit;\n\t}\n\n}\n\n\n// Get valid sections from the JSON data\nasync function getValidSections(jsonData: any): Promise<Section[]> {\n\tconst sections: Section[] = [];\n\tfor (const item of jsonData.result) {\n\t\t// Check if the section has all the required fields\n\t\tif (\n\t\t\titem.id === undefined ||\n\t\t\titem.Course === undefined ||\n\t\t\titem.Title === undefined ||\n\t\t\titem.Subject === undefined ||\n\t\t\titem.Professor === undefined ||\n\t\t\titem.Year === undefined ||\n\t\t\titem.Avg === undefined ||\n\t\t\titem.Pass === undefined ||\n\t\t\titem.Fail === undefined ||\n\t\t\titem.Audit === undefined\n\t\t) {\n\t\t\tcontinue; // skip this section\n\t\t} else {\n\t\t\t// section is valid, create a new section object\n\t\t\tlet section = new Section(\n\t\t\t\titem.id,\n\t\t\t\titem.Course,\n\t\t\t\titem.Title,\n\t\t\t\titem.Subject,\n\t\t\t\titem.Professor,\n\t\t\t\titem.Year,\n\t\t\t\titem.Avg,\n\t\t\t\titem.Pass,\n\t\t\t\titem.Fail,\n\t\t\t\titem.Audit\n\t\t\t);\n\t\t\t// add valid section to the list\n\t\t\tsections.push(section);\n\t\t}\n\t}\n\n\tif (sections.length === 0) {\n\t\treturn Promise.reject(new InsightError(\"No valid sections\"));\n\t}\n\treturn Promise.resolve(sections);\n}\n\nexport {getValidSections};\n"]}