"use strict";function cov_vpwvvi7rp(){var path="/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/IInsightFacade.ts";var hash="ffc7600bfc794cdeb0430f9c0c5715a570473398";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/IInsightFacade.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:113}},"2":{start:{line:5,column:0},end:{line:8,column:89}},"3":{start:{line:6,column:4},end:{line:6,column:48}},"4":{start:{line:7,column:4},end:{line:7,column:42}},"5":{start:{line:11,column:8},end:{line:11,column:23}},"6":{start:{line:12,column:8},end:{line:12,column:52}},"7":{start:{line:15,column:0},end:{line:15,column:36}},"8":{start:{line:18,column:8},end:{line:18,column:23}},"9":{start:{line:19,column:8},end:{line:19,column:53}},"10":{start:{line:22,column:0},end:{line:22,column:38}},"11":{start:{line:25,column:8},end:{line:25,column:23}},"12":{start:{line:26,column:8},end:{line:26,column:59}},"13":{start:{line:29,column:0},end:{line:29,column:50}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:1},end:{line:5,column:2}},loc:{start:{line:5,column:31},end:{line:8,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:25},end:{line:13,column:5}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:25},end:{line:20,column:5}},line:17},"3":{name:"(anonymous_3)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:25},end:{line:27,column:5}},line:24}},branchMap:{"0":{loc:{start:{line:8,column:24},end:{line:8,column:87}},type:"binary-expr",locations:[{start:{line:8,column:24},end:{line:8,column:50}},{start:{line:8,column:55},end:{line:8,column:86}}],line:8}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/IInsightFacade.ts",sources:["/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/IInsightFacade.ts"],names:[],mappings:";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC",sourcesContent:["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ffc7600bfc794cdeb0430f9c0c5715a570473398"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_vpwvvi7rp=function(){return actualCoverage;};}return actualCoverage;}cov_vpwvvi7rp();cov_vpwvvi7rp().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_vpwvvi7rp().s[1]++;exports.ResultTooLargeError=exports.NotFoundError=exports.InsightError=exports.InsightDatasetKind=void 0;var InsightDatasetKind;cov_vpwvvi7rp().s[2]++;(function(InsightDatasetKind){cov_vpwvvi7rp().f[0]++;cov_vpwvvi7rp().s[3]++;InsightDatasetKind["Sections"]="sections";cov_vpwvvi7rp().s[4]++;InsightDatasetKind["Rooms"]="rooms";})(InsightDatasetKind=(cov_vpwvvi7rp().b[0][0]++,exports.InsightDatasetKind)||(cov_vpwvvi7rp().b[0][1]++,exports.InsightDatasetKind={}));class InsightError extends Error{constructor(message){cov_vpwvvi7rp().f[1]++;cov_vpwvvi7rp().s[5]++;super(message);cov_vpwvvi7rp().s[6]++;Error.captureStackTrace(this,InsightError);}}cov_vpwvvi7rp().s[7]++;exports.InsightError=InsightError;class NotFoundError extends Error{constructor(message){cov_vpwvvi7rp().f[2]++;cov_vpwvvi7rp().s[8]++;super(message);cov_vpwvvi7rp().s[9]++;Error.captureStackTrace(this,NotFoundError);}}cov_vpwvvi7rp().s[10]++;exports.NotFoundError=NotFoundError;class ResultTooLargeError extends Error{constructor(message){cov_vpwvvi7rp().f[3]++;cov_vpwvvi7rp().s[11]++;super(message);cov_vpwvvi7rp().s[12]++;Error.captureStackTrace(this,ResultTooLargeError);}}cov_vpwvvi7rp().s[13]++;exports.ResultTooLargeError=ResultTooLargeError;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2p1bGlhL0RvY3VtZW50cy9VQkMvQkNTL0NQU0MgMzEwL3Byb2plY3RfdGVhbTA2Mi9zcmMvY29udHJvbGxlci9JSW5zaWdodEZhY2FkZS50cyIsInNvdXJjZXMiOlsiL1VzZXJzL2p1bGlhL0RvY3VtZW50cy9VQkMvQkNTL0NQU0MgMzEwL3Byb2plY3RfdGVhbTA2Mi9zcmMvY29udHJvbGxlci9JSW5zaWdodEZhY2FkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSxJQUFZLGtCQUdYO0FBSEQsV0FBWSxrQkFBa0I7SUFDN0IsMkNBQXFCLENBQUE7SUFDckIscUNBQWUsQ0FBQTtBQUNoQixDQUFDLEVBSFcsa0JBQWtCLEdBQWxCLDBCQUFrQixLQUFsQiwwQkFBa0IsUUFHN0I7QUFZRCxNQUFhLFlBQWEsU0FBUSxLQUFLO0lBQ3RDLFlBQVksT0FBZ0I7UUFDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0Q7QUFMRCxvQ0FLQztBQUVELE1BQWEsYUFBYyxTQUFRLEtBQUs7SUFDdkMsWUFBWSxPQUFnQjtRQUMzQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRDtBQUxELHNDQUtDO0FBRUQsTUFBYSxtQkFBb0IsU0FBUSxLQUFLO0lBQzdDLFlBQVksT0FBZ0I7UUFDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FDRDtBQUxELGtEQUtDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoaXMgaXMgdGhlIHByaW1hcnkgaGlnaC1sZXZlbCBBUEkgZm9yIHRoZSBwcm9qZWN0LiBJbiB0aGlzIGZvbGRlciB0aGVyZSBzaG91bGQgYmU6XG4gKiBBIGNsYXNzIGNhbGxlZCBJbnNpZ2h0RmFjYWRlLCB0aGlzIHNob3VsZCBiZSBpbiBhIGZpbGUgY2FsbGVkIEluc2lnaHRGYWNhZGUudHMuXG4gKiBZb3Ugc2hvdWxkIG5vdCBjaGFuZ2UgdGhpcyBpbnRlcmZhY2UgYXQgYWxsIG9yIHRoZSB0ZXN0IHN1aXRlIHdpbGwgbm90IHdvcmsuXG4gKi9cblxuZXhwb3J0IGVudW0gSW5zaWdodERhdGFzZXRLaW5kIHtcblx0U2VjdGlvbnMgPSBcInNlY3Rpb25zXCIsXG5cdFJvb21zID0gXCJyb29tc1wiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluc2lnaHREYXRhc2V0IHtcblx0aWQ6IHN0cmluZztcblx0a2luZDogSW5zaWdodERhdGFzZXRLaW5kO1xuXHRudW1Sb3dzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zaWdodFJlc3VsdCB7XG5cdFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEluc2lnaHRFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuXHRcdHN1cGVyKG1lc3NhZ2UpO1xuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEluc2lnaHRFcnJvcik7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcblx0XHRzdXBlcihtZXNzYWdlKTtcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBOb3RGb3VuZEVycm9yKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUmVzdWx0VG9vTGFyZ2VFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuXHRcdHN1cGVyKG1lc3NhZ2UpO1xuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFJlc3VsdFRvb0xhcmdlRXJyb3IpO1xuXHR9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUluc2lnaHRGYWNhZGUge1xuXHQvKipcblx0ICogQWRkIGEgZGF0YXNldCB0byBpbnNpZ2h0VUJDLlxuXHQgKlxuXHQgKiBAcGFyYW0gaWQgIFRoZSBpZCBvZiB0aGUgZGF0YXNldCBiZWluZyBhZGRlZC4gRm9sbG93cyB0aGUgZm9ybWF0IC9eW15fXSskL1xuXHQgKiBAcGFyYW0gY29udGVudCAgVGhlIGJhc2U2NCBjb250ZW50IG9mIHRoZSBkYXRhc2V0LiBUaGlzIGNvbnRlbnQgc2hvdWxkIGJlIGluIHRoZSBmb3JtIG9mIGEgc2VyaWFsaXplZCB6aXAgZmlsZS5cblx0ICogQHBhcmFtIGtpbmQgIFRoZSBraW5kIG9mIHRoZSBkYXRhc2V0XG5cdCAqXG5cdCAqIEByZXR1cm4gUHJvbWlzZSA8c3RyaW5nW10+XG5cdCAqXG5cdCAqIFRoZSBwcm9taXNlIHNob3VsZCBmdWxmaWxsIG9uIGEgc3VjY2Vzc2Z1bCBhZGQsIHJlamVjdCBmb3IgYW55IGZhaWx1cmVzLlxuXHQgKiBUaGUgcHJvbWlzZSBzaG91bGQgZnVsZmlsbCB3aXRoIGEgc3RyaW5nIGFycmF5LFxuXHQgKiBjb250YWluaW5nIHRoZSBpZHMgb2YgYWxsIGN1cnJlbnRseSBhZGRlZCBkYXRhc2V0cyB1cG9uIGEgc3VjY2Vzc2Z1bCBhZGQuXG5cdCAqIFRoZSBwcm9taXNlIHNob3VsZCByZWplY3Qgd2l0aCBhbiBJbnNpZ2h0RXJyb3IgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG5cdCAqXG5cdCAqIEFuIGlkIGlzIGludmFsaWQgaWYgaXQgY29udGFpbnMgYW4gdW5kZXJzY29yZSwgb3IgaXMgb25seSB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMuXG5cdCAqIElmIGlkIGlzIHRoZSBzYW1lIGFzIHRoZSBpZCBvZiBhbiBhbHJlYWR5IGFkZGVkIGRhdGFzZXQsIHRoZSBkYXRhc2V0IHNob3VsZCBiZSByZWplY3RlZCBhbmQgbm90IHNhdmVkLlxuXHQgKlxuXHQgKiBBZnRlciByZWNlaXZpbmcgdGhlIGRhdGFzZXQsIGl0IHNob3VsZCBiZSBwcm9jZXNzZWQgaW50byBhIGRhdGEgc3RydWN0dXJlIG9mXG5cdCAqIHlvdXIgZGVzaWduLiBUaGUgcHJvY2Vzc2VkIGRhdGEgc3RydWN0dXJlIHNob3VsZCBiZSBwZXJzaXN0ZWQgdG8gZGlzazsgeW91clxuXHQgKiBzeXN0ZW0gc2hvdWxkIGJlIGFibGUgdG8gbG9hZCB0aGlzIHBlcnNpc3RlZCB2YWx1ZSBpbnRvIG1lbW9yeSBmb3IgYW5zd2VyaW5nXG5cdCAqIHF1ZXJpZXMuXG5cdCAqXG5cdCAqIFVsdGltYXRlbHksIGEgZGF0YXNldCBtdXN0IGJlIGFkZGVkIG9yIGxvYWRlZCBmcm9tIGRpc2sgYmVmb3JlIHF1ZXJpZXMgY2FuXG5cdCAqIGJlIHN1Y2Nlc3NmdWxseSBhbnN3ZXJlZC5cblx0ICovXG5cdGFkZERhdGFzZXQoaWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nLCBraW5kOiBJbnNpZ2h0RGF0YXNldEtpbmQpOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuXHQvKipcblx0ICogUmVtb3ZlIGEgZGF0YXNldCBmcm9tIGluc2lnaHRVQkMuXG5cdCAqXG5cdCAqIEBwYXJhbSBpZCAgVGhlIGlkIG9mIHRoZSBkYXRhc2V0IHRvIHJlbW92ZS4gRm9sbG93cyB0aGUgZm9ybWF0IC9eW15fXSskL1xuXHQgKlxuXHQgKiBAcmV0dXJuIFByb21pc2UgPHN0cmluZz5cblx0ICpcblx0ICogVGhlIHByb21pc2Ugc2hvdWxkIGZ1bGZpbGwgdXBvbiBhIHN1Y2Nlc3NmdWwgcmVtb3ZhbCwgcmVqZWN0IG9uIGFueSBlcnJvci5cblx0ICogQXR0ZW1wdGluZyB0byByZW1vdmUgYSBkYXRhc2V0IHRoYXQgaGFzbid0IGJlZW4gYWRkZWQgeWV0IGNvdW50cyBhcyBhbiBlcnJvci5cblx0ICpcblx0ICogQW4gaWQgaXMgaW52YWxpZCBpZiBpdCBjb250YWlucyBhbiB1bmRlcnNjb3JlLCBvciBpcyBvbmx5IHdoaXRlc3BhY2UgY2hhcmFjdGVycy5cblx0ICpcblx0ICogVGhlIHByb21pc2Ugc2hvdWxkIGZ1bGZpbGwgdGhlIGlkIG9mIHRoZSBkYXRhc2V0IHRoYXQgd2FzIHJlbW92ZWQuXG5cdCAqIFRoZSBwcm9taXNlIHNob3VsZCByZWplY3Qgd2l0aCBhIE5vdEZvdW5kRXJyb3IgKGlmIGEgdmFsaWQgaWQgd2FzIG5vdCB5ZXQgYWRkZWQpXG5cdCAqIG9yIGFuIEluc2lnaHRFcnJvciAoaW52YWxpZCBpZCBvciBhbnkgb3RoZXIgc291cmNlIG9mIGZhaWx1cmUpIGRlc2NyaWJpbmcgdGhlIGVycm9yLlxuXHQgKlxuXHQgKiBUaGlzIHdpbGwgZGVsZXRlIGJvdGggZGlzayBhbmQgbWVtb3J5IGNhY2hlcyBmb3IgdGhlIGRhdGFzZXQgZm9yIHRoZSBpZCBtZWFuaW5nXG5cdCAqIHRoYXQgc3Vic2VxdWVudCBxdWVyaWVzIGZvciB0aGF0IGlkIHNob3VsZCBmYWlsIHVubGVzcyBhIG5ldyBhZGREYXRhc2V0IGhhcHBlbnMgZmlyc3QuXG5cdCAqL1xuXHRyZW1vdmVEYXRhc2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XG5cblx0LyoqXG5cdCAqIFBlcmZvcm0gYSBxdWVyeSBvbiBpbnNpZ2h0VUJDLlxuXHQgKlxuXHQgKiBAcGFyYW0gcXVlcnkgIFRoZSBxdWVyeSB0byBiZSBwZXJmb3JtZWQuXG5cdCAqXG5cdCAqIElmIGEgcXVlcnkgaXMgaW5jb3JyZWN0bHkgZm9ybWF0dGVkLCByZWZlcmVuY2VzIGEgZGF0YXNldCBub3QgYWRkZWQgKGluIG1lbW9yeSBvciBvbiBkaXNrKSxcblx0ICogb3IgcmVmZXJlbmNlcyBtdWx0aXBsZSBkYXRhc2V0cywgaXQgc2hvdWxkIGJlIHJlamVjdGVkLlxuXHQgKlxuXHQgKiBAcmV0dXJuIFByb21pc2UgPEluc2lnaHRSZXN1bHRbXT5cblx0ICpcblx0ICogVGhlIHByb21pc2Ugc2hvdWxkIGZ1bGZpbGwgd2l0aCBhbiBhcnJheSBvZiByZXN1bHRzLlxuXHQgKiBUaGUgcHJvbWlzZSBzaG91bGQgcmVqZWN0IHdpdGggYSBSZXN1bHRUb29MYXJnZUVycm9yIChpZiB0aGUgcXVlcnkgcmV0dXJucyB0b28gbWFueSByZXN1bHRzKVxuXHQgKiBvciBhbiBJbnNpZ2h0RXJyb3IgKGZvciBhbnkgb3RoZXIgc291cmNlIG9mIGZhaWx1cmUpIGRlc2NyaWJpbmcgdGhlIGVycm9yLlxuXHQgKi9cblx0cGVyZm9ybVF1ZXJ5KHF1ZXJ5OiB1bmtub3duKTogUHJvbWlzZTxJbnNpZ2h0UmVzdWx0W10+O1xuXG5cdC8qKlxuXHQgKiBMaXN0IGFsbCBjdXJyZW50bHkgYWRkZWQgZGF0YXNldHMsIHRoZWlyIHR5cGVzLCBhbmQgbnVtYmVyIG9mIHJvd3MuXG5cdCAqXG5cdCAqIEByZXR1cm4gUHJvbWlzZSA8SW5zaWdodERhdGFzZXRbXT5cblx0ICogVGhlIHByb21pc2Ugc2hvdWxkIGZ1bGZpbGwgYW4gYXJyYXkgb2YgY3VycmVudGx5IGFkZGVkIEluc2lnaHREYXRhc2V0cywgYW5kIHdpbGwgb25seSBmdWxmaWxsLlxuXHQgKi9cblx0bGlzdERhdGFzZXRzKCk6IFByb21pc2U8SW5zaWdodERhdGFzZXRbXT47XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfdnB3dnZpN3JwIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiSW5zaWdodERhdGFzZXRLaW5kIiwiZiIsImIiLCJleHBvcnRzIiwiSW5zaWdodEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIk5vdEZvdW5kRXJyb3IiLCJSZXN1bHRUb29MYXJnZUVycm9yIl0sInNvdXJjZXMiOlsiL1VzZXJzL2p1bGlhL0RvY3VtZW50cy9VQkMvQkNTL0NQU0MgMzEwL3Byb2plY3RfdGVhbTA2Mi9zcmMvY29udHJvbGxlci9JSW5zaWdodEZhY2FkZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVGhpcyBpcyB0aGUgcHJpbWFyeSBoaWdoLWxldmVsIEFQSSBmb3IgdGhlIHByb2plY3QuIEluIHRoaXMgZm9sZGVyIHRoZXJlIHNob3VsZCBiZTpcbiAqIEEgY2xhc3MgY2FsbGVkIEluc2lnaHRGYWNhZGUsIHRoaXMgc2hvdWxkIGJlIGluIGEgZmlsZSBjYWxsZWQgSW5zaWdodEZhY2FkZS50cy5cbiAqIFlvdSBzaG91bGQgbm90IGNoYW5nZSB0aGlzIGludGVyZmFjZSBhdCBhbGwgb3IgdGhlIHRlc3Qgc3VpdGUgd2lsbCBub3Qgd29yay5cbiAqL1xuXG5leHBvcnQgZW51bSBJbnNpZ2h0RGF0YXNldEtpbmQge1xuXHRTZWN0aW9ucyA9IFwic2VjdGlvbnNcIixcblx0Um9vbXMgPSBcInJvb21zXCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zaWdodERhdGFzZXQge1xuXHRpZDogc3RyaW5nO1xuXHRraW5kOiBJbnNpZ2h0RGF0YXNldEtpbmQ7XG5cdG51bVJvd3M6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnNpZ2h0UmVzdWx0IHtcblx0W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgSW5zaWdodEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW5zaWdodEVycm9yKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTm90Rm91bmRFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuXHRcdHN1cGVyKG1lc3NhZ2UpO1xuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIE5vdEZvdW5kRXJyb3IpO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXN1bHRUb29MYXJnZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUmVzdWx0VG9vTGFyZ2VFcnJvcik7XG5cdH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJSW5zaWdodEZhY2FkZSB7XG5cdC8qKlxuXHQgKiBBZGQgYSBkYXRhc2V0IHRvIGluc2lnaHRVQkMuXG5cdCAqXG5cdCAqIEBwYXJhbSBpZCAgVGhlIGlkIG9mIHRoZSBkYXRhc2V0IGJlaW5nIGFkZGVkLiBGb2xsb3dzIHRoZSBmb3JtYXQgL15bXl9dKyQvXG5cdCAqIEBwYXJhbSBjb250ZW50ICBUaGUgYmFzZTY0IGNvbnRlbnQgb2YgdGhlIGRhdGFzZXQuIFRoaXMgY29udGVudCBzaG91bGQgYmUgaW4gdGhlIGZvcm0gb2YgYSBzZXJpYWxpemVkIHppcCBmaWxlLlxuXHQgKiBAcGFyYW0ga2luZCAgVGhlIGtpbmQgb2YgdGhlIGRhdGFzZXRcblx0ICpcblx0ICogQHJldHVybiBQcm9taXNlIDxzdHJpbmdbXT5cblx0ICpcblx0ICogVGhlIHByb21pc2Ugc2hvdWxkIGZ1bGZpbGwgb24gYSBzdWNjZXNzZnVsIGFkZCwgcmVqZWN0IGZvciBhbnkgZmFpbHVyZXMuXG5cdCAqIFRoZSBwcm9taXNlIHNob3VsZCBmdWxmaWxsIHdpdGggYSBzdHJpbmcgYXJyYXksXG5cdCAqIGNvbnRhaW5pbmcgdGhlIGlkcyBvZiBhbGwgY3VycmVudGx5IGFkZGVkIGRhdGFzZXRzIHVwb24gYSBzdWNjZXNzZnVsIGFkZC5cblx0ICogVGhlIHByb21pc2Ugc2hvdWxkIHJlamVjdCB3aXRoIGFuIEluc2lnaHRFcnJvciBkZXNjcmliaW5nIHRoZSBlcnJvci5cblx0ICpcblx0ICogQW4gaWQgaXMgaW52YWxpZCBpZiBpdCBjb250YWlucyBhbiB1bmRlcnNjb3JlLCBvciBpcyBvbmx5IHdoaXRlc3BhY2UgY2hhcmFjdGVycy5cblx0ICogSWYgaWQgaXMgdGhlIHNhbWUgYXMgdGhlIGlkIG9mIGFuIGFscmVhZHkgYWRkZWQgZGF0YXNldCwgdGhlIGRhdGFzZXQgc2hvdWxkIGJlIHJlamVjdGVkIGFuZCBub3Qgc2F2ZWQuXG5cdCAqXG5cdCAqIEFmdGVyIHJlY2VpdmluZyB0aGUgZGF0YXNldCwgaXQgc2hvdWxkIGJlIHByb2Nlc3NlZCBpbnRvIGEgZGF0YSBzdHJ1Y3R1cmUgb2Zcblx0ICogeW91ciBkZXNpZ24uIFRoZSBwcm9jZXNzZWQgZGF0YSBzdHJ1Y3R1cmUgc2hvdWxkIGJlIHBlcnNpc3RlZCB0byBkaXNrOyB5b3VyXG5cdCAqIHN5c3RlbSBzaG91bGQgYmUgYWJsZSB0byBsb2FkIHRoaXMgcGVyc2lzdGVkIHZhbHVlIGludG8gbWVtb3J5IGZvciBhbnN3ZXJpbmdcblx0ICogcXVlcmllcy5cblx0ICpcblx0ICogVWx0aW1hdGVseSwgYSBkYXRhc2V0IG11c3QgYmUgYWRkZWQgb3IgbG9hZGVkIGZyb20gZGlzayBiZWZvcmUgcXVlcmllcyBjYW5cblx0ICogYmUgc3VjY2Vzc2Z1bGx5IGFuc3dlcmVkLlxuXHQgKi9cblx0YWRkRGF0YXNldChpZDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIGtpbmQ6IEluc2lnaHREYXRhc2V0S2luZCk6IFByb21pc2U8c3RyaW5nW10+O1xuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYSBkYXRhc2V0IGZyb20gaW5zaWdodFVCQy5cblx0ICpcblx0ICogQHBhcmFtIGlkICBUaGUgaWQgb2YgdGhlIGRhdGFzZXQgdG8gcmVtb3ZlLiBGb2xsb3dzIHRoZSBmb3JtYXQgL15bXl9dKyQvXG5cdCAqXG5cdCAqIEByZXR1cm4gUHJvbWlzZSA8c3RyaW5nPlxuXHQgKlxuXHQgKiBUaGUgcHJvbWlzZSBzaG91bGQgZnVsZmlsbCB1cG9uIGEgc3VjY2Vzc2Z1bCByZW1vdmFsLCByZWplY3Qgb24gYW55IGVycm9yLlxuXHQgKiBBdHRlbXB0aW5nIHRvIHJlbW92ZSBhIGRhdGFzZXQgdGhhdCBoYXNuJ3QgYmVlbiBhZGRlZCB5ZXQgY291bnRzIGFzIGFuIGVycm9yLlxuXHQgKlxuXHQgKiBBbiBpZCBpcyBpbnZhbGlkIGlmIGl0IGNvbnRhaW5zIGFuIHVuZGVyc2NvcmUsIG9yIGlzIG9ubHkgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzLlxuXHQgKlxuXHQgKiBUaGUgcHJvbWlzZSBzaG91bGQgZnVsZmlsbCB0aGUgaWQgb2YgdGhlIGRhdGFzZXQgdGhhdCB3YXMgcmVtb3ZlZC5cblx0ICogVGhlIHByb21pc2Ugc2hvdWxkIHJlamVjdCB3aXRoIGEgTm90Rm91bmRFcnJvciAoaWYgYSB2YWxpZCBpZCB3YXMgbm90IHlldCBhZGRlZClcblx0ICogb3IgYW4gSW5zaWdodEVycm9yIChpbnZhbGlkIGlkIG9yIGFueSBvdGhlciBzb3VyY2Ugb2YgZmFpbHVyZSkgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG5cdCAqXG5cdCAqIFRoaXMgd2lsbCBkZWxldGUgYm90aCBkaXNrIGFuZCBtZW1vcnkgY2FjaGVzIGZvciB0aGUgZGF0YXNldCBmb3IgdGhlIGlkIG1lYW5pbmdcblx0ICogdGhhdCBzdWJzZXF1ZW50IHF1ZXJpZXMgZm9yIHRoYXQgaWQgc2hvdWxkIGZhaWwgdW5sZXNzIGEgbmV3IGFkZERhdGFzZXQgaGFwcGVucyBmaXJzdC5cblx0ICovXG5cdHJlbW92ZURhdGFzZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcblxuXHQvKipcblx0ICogUGVyZm9ybSBhIHF1ZXJ5IG9uIGluc2lnaHRVQkMuXG5cdCAqXG5cdCAqIEBwYXJhbSBxdWVyeSAgVGhlIHF1ZXJ5IHRvIGJlIHBlcmZvcm1lZC5cblx0ICpcblx0ICogSWYgYSBxdWVyeSBpcyBpbmNvcnJlY3RseSBmb3JtYXR0ZWQsIHJlZmVyZW5jZXMgYSBkYXRhc2V0IG5vdCBhZGRlZCAoaW4gbWVtb3J5IG9yIG9uIGRpc2spLFxuXHQgKiBvciByZWZlcmVuY2VzIG11bHRpcGxlIGRhdGFzZXRzLCBpdCBzaG91bGQgYmUgcmVqZWN0ZWQuXG5cdCAqXG5cdCAqIEByZXR1cm4gUHJvbWlzZSA8SW5zaWdodFJlc3VsdFtdPlxuXHQgKlxuXHQgKiBUaGUgcHJvbWlzZSBzaG91bGQgZnVsZmlsbCB3aXRoIGFuIGFycmF5IG9mIHJlc3VsdHMuXG5cdCAqIFRoZSBwcm9taXNlIHNob3VsZCByZWplY3Qgd2l0aCBhIFJlc3VsdFRvb0xhcmdlRXJyb3IgKGlmIHRoZSBxdWVyeSByZXR1cm5zIHRvbyBtYW55IHJlc3VsdHMpXG5cdCAqIG9yIGFuIEluc2lnaHRFcnJvciAoZm9yIGFueSBvdGhlciBzb3VyY2Ugb2YgZmFpbHVyZSkgZGVzY3JpYmluZyB0aGUgZXJyb3IuXG5cdCAqL1xuXHRwZXJmb3JtUXVlcnkocXVlcnk6IHVua25vd24pOiBQcm9taXNlPEluc2lnaHRSZXN1bHRbXT47XG5cblx0LyoqXG5cdCAqIExpc3QgYWxsIGN1cnJlbnRseSBhZGRlZCBkYXRhc2V0cywgdGhlaXIgdHlwZXMsIGFuZCBudW1iZXIgb2Ygcm93cy5cblx0ICpcblx0ICogQHJldHVybiBQcm9taXNlIDxJbnNpZ2h0RGF0YXNldFtdPlxuXHQgKiBUaGUgcHJvbWlzZSBzaG91bGQgZnVsZmlsbCBhbiBhcnJheSBvZiBjdXJyZW50bHkgYWRkZWQgSW5zaWdodERhdGFzZXRzLCBhbmQgd2lsbCBvbmx5IGZ1bGZpbGwuXG5cdCAqL1xuXHRsaXN0RGF0YXNldHMoKTogUHJvbWlzZTxJbnNpZ2h0RGF0YXNldFtdPjtcbn1cbiJdLCJtYXBwaW5ncyI6Im91T0E0QmE7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBQUFBLGFBQUEsR0FBQUUsQ0FBQSxNLHlMQXRCYixHQUFZLENBQUFDLGtCQUdYLENBQUFILGFBQUEsR0FBQUUsQ0FBQSxNQUhELFVBQVlDLGtCQUFrQixFQUFBSCxhQUFBLEdBQUFJLENBQUEsTUFBQUosYUFBQSxHQUFBRSxDQUFBLE1BQzdCQyxrQkFBQSx1QkFBcUIsQ0FBQUgsYUFBQSxHQUFBRSxDQUFBLE1BQ3JCQyxrQkFBQSxpQkFBZSxDQUNoQixDQUFDLEVBSFdBLGtCQUFrQixDQUFsQixDQUFBSCxhQUFBLEdBQUFLLENBQUEsU0FBQUMsT0FBQSxDQUFBSCxrQkFBa0IsSUFBQUgsYUFBQSxHQUFBSyxDQUFBLFNBQWxCQyxPQUFBLENBQUFILGtCQUFrQixNQWU5QixLQUFhLENBQUFJLFlBQWEsUUFBUSxDQUFBQyxLQUFLLENBQ3RDQyxZQUFZQyxPQUFnQixFQUFBVixhQUFBLEdBQUFJLENBQUEsTUFBQUosYUFBQSxHQUFBRSxDQUFBLE1BQzNCLEtBQUssQ0FBQ1EsT0FBTyxDQUFDLENBQUNWLGFBQUEsR0FBQUUsQ0FBQSxNQUNmTSxLQUFLLENBQUNHLGlCQUFpQixDQUFDLElBQUksQ0FBRUosWUFBWSxDQUFDLENBQzVDLEMsQ0FDQVAsYUFBQSxHQUFBRSxDQUFBLE1BTERJLE9BQUEsQ0FBQUMsWUFBQSxDQUFBQSxZQUFBLENBT0EsS0FBYSxDQUFBSyxhQUFjLFFBQVEsQ0FBQUosS0FBSyxDQUN2Q0MsWUFBWUMsT0FBZ0IsRUFBQVYsYUFBQSxHQUFBSSxDQUFBLE1BQUFKLGFBQUEsR0FBQUUsQ0FBQSxNQUMzQixLQUFLLENBQUNRLE9BQU8sQ0FBQyxDQUFDVixhQUFBLEdBQUFFLENBQUEsTUFDZk0sS0FBSyxDQUFDRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUVDLGFBQWEsQ0FBQyxDQUM3QyxDLENBQ0FaLGFBQUEsR0FBQUUsQ0FBQSxPQUxESSxPQUFBLENBQUFNLGFBQUEsQ0FBQUEsYUFBQSxDQU9BLEtBQWEsQ0FBQUMsbUJBQW9CLFFBQVEsQ0FBQUwsS0FBSyxDQUM3Q0MsWUFBWUMsT0FBZ0IsRUFBQVYsYUFBQSxHQUFBSSxDQUFBLE1BQUFKLGFBQUEsR0FBQUUsQ0FBQSxPQUMzQixLQUFLLENBQUNRLE9BQU8sQ0FBQyxDQUFDVixhQUFBLEdBQUFFLENBQUEsT0FDZk0sS0FBSyxDQUFDRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUVFLG1CQUFtQixDQUFDLENBQ25ELEMsQ0FDQWIsYUFBQSxHQUFBRSxDQUFBLE9BTERJLE9BQUEsQ0FBQU8sbUJBQUEsQ0FBQUEsbUJBQUEsQyJ9