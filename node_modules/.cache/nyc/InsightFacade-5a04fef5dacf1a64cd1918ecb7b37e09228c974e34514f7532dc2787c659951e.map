{"version":3,"file":"/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/InsightFacade.ts","sources":["/Users/julia/Documents/UBC/BCS/CPSC 310/project_team062/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {IInsightFacade, InsightDataset, InsightDatasetKind,\n\tInsightError, InsightResult, NotFoundError} from \"./IInsightFacade\";\nimport Section from \"./Section\";\nimport * as fs from \"fs-extra\";\nimport * as path from \"path\";\nimport {loadDatasets, unzipFile, parseFile, writeToDisk,\n\taddSectionData, getSectionData, removeSectionData} from \"./LoadHelperFunctions\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\tpublic datasets: {[id: string]: {metadata: InsightDataset; data: Section[]}};\n\tpublic metadata: {[id: string]: InsightDataset};\n\tpublic dbData: {[id: string]: Section[]};\n\n\tconstructor() {\n\t\tthis.datasets = {};\n\t\tthis.metadata = {};\n\t\tthis.dbData = {};\n\t\tconsole.log(\"InsightFacadeImpl::init()\");\n\t}\n\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\t// if loaded datasets are empty, we load metadata from disk\n\t\tif (Object.keys(this.metadata).length === 0) {\n\t\t\ttry {\n\t\t\t\tthis.metadata = await loadDatasets();\n\t\t\t} catch (e) {\n\t\t\t\tthis.metadata = {};\n\t\t\t}\n\t\t}\n\n\t\t// check if id is valid\n\t\tif (\n\t\t\tid === undefined ||\n\t\t\tid === null ||\n\t\t\tid === \"\" ||\n\t\t\tid.includes(\"_\") ||\n\t\t\tid.trim().length === 0 ||\n\t\t\tObject.keys(this.metadata).includes(id)\n\t\t) {\n\t\t\treturn Promise.reject(new InsightError(\"Invalid id\"));\n\t\t}\n\n\t\tconst file = await unzipFile(content);\n\t\tlet sectionContent: Section[] = [];\n\n\t\t// check if kind is valid -- only sections allowed\n\t\tif (kind === InsightDatasetKind.Sections) {\n\t\t\t// parse the file and check if content is valid in process\n\t\t\ttry {\n\t\t\t\tsectionContent = await parseFile(file);\n\t\t\t} catch (e) {\n\t\t\t\treturn Promise.reject(new InsightError(\"Invalid content\"));\n\t\t\t}\n\t\t} else {\n\t\t\treturn Promise.reject(new InsightError(\"Invalid kind\"));\n\t\t}\n\n\t\tlet dataset: InsightDataset = {\n\t\t\tid: id,\n\t\t\tkind: kind,\n\t\t\tnumRows: sectionContent.length,\n\t\t};\n\n\t\tthis.metadata[id] = dataset;\n\t\tthis.dbData[id] = sectionContent;\n\t\tconst datasetIds: string[] = Object.keys(this.metadata);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await writeToDisk(this.metadata);\n\t\t\tresult = await addSectionData(id, sectionContent);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(new InsightError(\"Could not write to disk\"));\n\t\t}\n\n\t\treturn Promise.resolve(datasetIds);\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\tlet datasetList: InsightDataset[] = [];\n\n\t\tif(Object.keys(this.metadata).length === 0) {\n\t\t\ttry {\n\t\t\t\tthis.metadata = await loadDatasets();\n\t\t\t} catch (e) {\n\t\t\t\treturn Promise.resolve([]);\n\t\t\t}\n\t\t}\n\n\t\tfor (const dataset in this.metadata) {\n\t\t\tdatasetList.push(this.metadata[dataset]);\n\t\t}\n\t\treturn Promise.resolve(datasetList);\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\tif (id === undefined || id === null || id === \"\" || id.includes(\"_\") || id.trim().length === 0) {\n\t\t\treturn Promise.reject(new InsightError(\"Invalid id\"));\n\t\t}\n\n\t\tif(Object.keys(this.metadata).length === 0) {\n\t\t\ttry {\n\t\t\t\tthis.metadata = await loadDatasets();\n\t\t\t} catch (e) {\n\t\t\t\treturn Promise.reject(new NotFoundError(\"Could not load datasets\"));\n\t\t\t}\n\t\t}\n\n\t\tif (!Object.keys(this.metadata).includes(id)) {\n\t\t\treturn Promise.reject(new NotFoundError(\"Dataset not found\"));\n\t\t}\n\n\t\tdelete this.metadata[id];\n\n\t\ttry {\n\t\t\tawait removeSectionData(id);\n\t\t\tawait writeToDisk(this.metadata);\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(new InsightError(\"Could not write to disk\"));\n\t\t}\n\t\treturn Promise.resolve(id);\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}\n\n"]}